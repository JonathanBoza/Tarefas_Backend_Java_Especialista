
# Exerc√≠cio 4 ‚Äì Complexidades Assint√≥ticas de Tempo e Espa√ßo
## Autor: Jonathan Euz√©bio Boza

---

## üì¶ PILHA
### push(int valor)
- Tempo: O(1) ‚Äî Adiciona diretamente na pr√≥xima posi√ß√£o do array.
- Espa√ßo: O(1) por opera√ß√£o, O(n) no total (onde n √© a capacidade da pilha).

### pop()
- Tempo: O(1) ‚Äî Acesso direto ao topo e decremento.
- Espa√ßo: O(1)

---

## üì¶ FILA
### enqueue(int valor)
- Tempo: O(1) ‚Äî Insere no final usando √≠ndice com rota√ß√£o (fila circular).
- Espa√ßo: O(1) por opera√ß√£o, O(n) no total.

### dequeue()
- Tempo: O(1) ‚Äî Remove do in√≠cio com rota√ß√£o.
- Espa√ßo: O(1)

### rear(), front()
- Tempo: O(1) ‚Äî Acesso direto ao √≠ndice.
- Espa√ßo: O(1)

---

## üì¶ LISTA ENCADEADA
### push(Node node)
- Tempo: O(n) ‚Äî Precisa percorrer at√© o final da lista para adicionar.
- Espa√ßo: O(1) por opera√ß√£o, O(n) no total.

### pop()
- Tempo: O(n) ‚Äî Percorre at√© o pen√∫ltimo n√≥ para remover o √∫ltimo.
- Espa√ßo: O(1)

### insert(int index, Node node)
- Tempo: O(n) ‚Äî Percorre at√© o √≠ndice.
- Espa√ßo: O(1)

### remove(int index)
- Tempo: O(n) ‚Äî Percorre at√© o √≠ndice.
- Espa√ßo: O(1)

### elementAt(int index)
- Tempo: O(n) ‚Äî Percorre at√© o √≠ndice.
- Espa√ßo: O(1)

---

## üß† Justificativa

As complexidades variam conforme a estrutura escolhida:
- **Array** permite acesso r√°pido (Pilha, Fila), mas tem tamanho fixo.
- **Lista Encadeada** tem custo maior para acesso, mas √© flex√≠vel.

Todas as estruturas foram implementadas do zero, sem uso de bibliotecas prontas da linguagem Java.
